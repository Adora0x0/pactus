// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastReceiptsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastReceiptsHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastReceiptsHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) LastCommitHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasLastCommitHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCommitHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) CommitersHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasCommitersHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetCommitersHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(6, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Commiter struct{ capnp.Struct }

// Commiter_TypeID is the unique identifier for the type Commiter.
const Commiter_TypeID = 0x96a4d92c028ddf36

func NewCommiter(s *capnp.Segment) (Commiter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Commiter{st}, err
}

func NewRootCommiter(s *capnp.Segment) (Commiter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Commiter{st}, err
}

func ReadRootCommiter(msg *capnp.Message) (Commiter, error) {
	root, err := msg.RootPtr()
	return Commiter{root.Struct()}, err
}

func (s Commiter) String() string {
	str, _ := text.Marshal(0x96a4d92c028ddf36, s.Struct)
	return str
}

func (s Commiter) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commiter) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commiter) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commiter) Signed() bool {
	return s.Struct.Bit(0)
}

func (s Commiter) SetSigned(v bool) {
	s.Struct.SetBit(0, v)
}

// Commiter_List is a list of Commiter.
type Commiter_List struct{ capnp.List }

// NewCommiter creates a new list of Commiter.
func NewCommiter_List(s *capnp.Segment, sz int32) (Commiter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Commiter_List{l}, err
}

func (s Commiter_List) At(i int) Commiter { return Commiter{s.List.Struct(i)} }

func (s Commiter_List) Set(i int, v Commiter) error { return s.List.SetStruct(i, v.Struct) }

func (s Commiter_List) String() string {
	str, _ := text.MarshalList(0x96a4d92c028ddf36, s.List)
	return str
}

// Commiter_Promise is a wrapper for a Commiter promised by a client call.
type Commiter_Promise struct{ *capnp.Pipeline }

func (p Commiter_Promise) Struct() (Commiter, error) {
	s, err := p.Pipeline.Struct()
	return Commiter{s}, err
}

type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xf106488f1d14ab37

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xf106488f1d14ab37, s.Struct)
	return str
}

func (s Commit) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Commit) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Commit) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasSignature() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetSignature(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Commiters() (Commiter_List, error) {
	p, err := s.Struct.Ptr(1)
	return Commiter_List{List: p.List()}, err
}

func (s Commit) HasCommiters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) SetCommiters(v Commiter_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommiters sets the commiters field to a newly
// allocated Commiter_List, preferring placement in s's segment.
func (s Commit) NewCommiters(n int32) (Commiter_List, error) {
	l, err := NewCommiter_List(s.Struct.Segment(), n)
	if err != nil {
		return Commiter_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xf106488f1d14ab37, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(1)
	return Commit{Struct: p.Struct()}, err
}

func (s Block) HasLastCommit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Block) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(2)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockInfo struct{ capnp.Struct }

// BlockInfo_TypeID is the unique identifier for the type BlockInfo.
const BlockInfo_TypeID = 0xe4bd2fc3497ade9b

func NewBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func NewRootBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func ReadRootBlockInfo(msg *capnp.Message) (BlockInfo, error) {
	root, err := msg.RootPtr()
	return BlockInfo{root.Struct()}, err
}

func (s BlockInfo) String() string {
	str, _ := text.Marshal(0xe4bd2fc3497ade9b, s.Struct)
	return str
}

func (s BlockInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockInfo) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockInfo) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockInfo) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockInfo_List is a list of BlockInfo.
type BlockInfo_List struct{ capnp.List }

// NewBlockInfo creates a new list of BlockInfo.
func NewBlockInfo_List(s *capnp.Segment, sz int32) (BlockInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockInfo_List{l}, err
}

func (s BlockInfo_List) At(i int) BlockInfo { return BlockInfo{s.List.Struct(i)} }

func (s BlockInfo_List) Set(i int, v BlockInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockInfo_List) String() string {
	str, _ := text.MarshalList(0xe4bd2fc3497ade9b, s.List)
	return str
}

// BlockInfo_Promise is a wrapper for a BlockInfo promised by a client call.
type BlockInfo_Promise struct{ *capnp.Pipeline }

func (p BlockInfo_Promise) Struct() (BlockInfo, error) {
	s, err := p.Pipeline.Struct()
	return BlockInfo{s}, err
}

func (p BlockInfo_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xa1d5f1677ab15215

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xa1d5f1677ab15215, s.Struct)
	return str
}

func (s Tx) Stamp() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Tx) HasStamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetStamp(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Tx) Sender() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Tx) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetSender(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Tx) Receiver() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx) HasReceiver() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetReceiver(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Tx) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Tx) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Tx) Fee() uint64 {
	return s.Struct.Uint64(8)
}

func (s Tx) SetFee(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Tx) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Tx) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Tx) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Tx) Memo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Tx) HasMemo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Tx) MemoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Tx) SetMemo(v string) error {
	return s.Struct.SetText(4, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xa1d5f1677ab15215, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

type TxInfo struct{ capnp.Struct }

// TxInfo_TypeID is the unique identifier for the type TxInfo.
const TxInfo_TypeID = 0xf5a0d0fb09da17c7

func NewTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func NewRootTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func ReadRootTxInfo(msg *capnp.Message) (TxInfo, error) {
	root, err := msg.RootPtr()
	return TxInfo{root.Struct()}, err
}

func (s TxInfo) String() string {
	str, _ := text.Marshal(0xf5a0d0fb09da17c7, s.Struct)
	return str
}

func (s TxInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s TxInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TxInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxInfo) Tx() (Tx, error) {
	p, err := s.Struct.Ptr(2)
	return Tx{Struct: p.Struct()}, err
}

func (s TxInfo) HasTx() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetTx(v Tx) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTx sets the tx field to a newly
// allocated Tx struct, preferring placement in s's segment.
func (s TxInfo) NewTx() (Tx, error) {
	ss, err := NewTx(s.Struct.Segment())
	if err != nil {
		return Tx{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// TxInfo_List is a list of TxInfo.
type TxInfo_List struct{ capnp.List }

// NewTxInfo creates a new list of TxInfo.
func NewTxInfo_List(s *capnp.Segment, sz int32) (TxInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return TxInfo_List{l}, err
}

func (s TxInfo_List) At(i int) TxInfo { return TxInfo{s.List.Struct(i)} }

func (s TxInfo_List) Set(i int, v TxInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s TxInfo_List) String() string {
	str, _ := text.MarshalList(0xf5a0d0fb09da17c7, s.List)
	return str
}

// TxInfo_Promise is a wrapper for a TxInfo promised by a client call.
type TxInfo_Promise struct{ *capnp.Pipeline }

func (p TxInfo_Promise) Struct() (TxInfo, error) {
	s, err := p.Pipeline.Struct()
	return TxInfo{s}, err
}

func (p TxInfo_Promise) Tx() Tx_Promise {
	return Tx_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) BlockAt(ctx context.Context, params func(ZarbServer_blockAt_Params) error, opts ...capnp.CallOption) ZarbServer_blockAt_Results_Promise {
	if c.Client == nil {
		return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_blockAt_Params{Struct: s}) }
	}
	return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Block(ctx context.Context, params func(ZarbServer_block_Params) error, opts ...capnp.CallOption) ZarbServer_block_Results_Promise {
	if c.Client == nil {
		return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_block_Params{Struct: s}) }
	}
	return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Tx(ctx context.Context, params func(ZarbServer_tx_Params) error, opts ...capnp.CallOption) ZarbServer_tx_Results_Promise {
	if c.Client == nil {
		return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_tx_Params{Struct: s}) }
	}
	return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	BlockAt(ZarbServer_blockAt) error

	Block(ZarbServer_block) error

	Tx(ZarbServer_tx) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_blockAt{c, opts, ZarbServer_blockAt_Params{Struct: p}, ZarbServer_blockAt_Results{Struct: r}}
			return s.BlockAt(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_block{c, opts, ZarbServer_block_Params{Struct: p}, ZarbServer_block_Results{Struct: r}}
			return s.Block(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_tx{c, opts, ZarbServer_tx_Params{Struct: p}, ZarbServer_tx_Results{Struct: r}}
			return s.Tx(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_blockAt holds the arguments for a server call to ZarbServer.blockAt.
type ZarbServer_blockAt struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_blockAt_Params
	Results ZarbServer_blockAt_Results
}

// ZarbServer_block holds the arguments for a server call to ZarbServer.block.
type ZarbServer_block struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_block_Params
	Results ZarbServer_block_Results
}

// ZarbServer_tx holds the arguments for a server call to ZarbServer.tx.
type ZarbServer_tx struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_tx_Params
	Results ZarbServer_tx_Results
}

type ZarbServer_blockAt_Params struct{ capnp.Struct }

// ZarbServer_blockAt_Params_TypeID is the unique identifier for the type ZarbServer_blockAt_Params.
const ZarbServer_blockAt_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func NewRootZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func ReadRootZarbServer_blockAt_Params(msg *capnp.Message) (ZarbServer_blockAt_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Params{root.Struct()}, err
}

func (s ZarbServer_blockAt_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Params) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s ZarbServer_blockAt_Params) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ZarbServer_blockAt_Params_List is a list of ZarbServer_blockAt_Params.
type ZarbServer_blockAt_Params_List struct{ capnp.List }

// NewZarbServer_blockAt_Params creates a new list of ZarbServer_blockAt_Params.
func NewZarbServer_blockAt_Params_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_blockAt_Params_List{l}, err
}

func (s ZarbServer_blockAt_Params_List) At(i int) ZarbServer_blockAt_Params {
	return ZarbServer_blockAt_Params{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Params_List) Set(i int, v ZarbServer_blockAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_blockAt_Params_Promise is a wrapper for a ZarbServer_blockAt_Params promised by a client call.
type ZarbServer_blockAt_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Params_Promise) Struct() (ZarbServer_blockAt_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Params{s}, err
}

type ZarbServer_blockAt_Results struct{ capnp.Struct }

// ZarbServer_blockAt_Results_TypeID is the unique identifier for the type ZarbServer_blockAt_Results.
const ZarbServer_blockAt_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func NewRootZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func ReadRootZarbServer_blockAt_Results(msg *capnp.Message) (ZarbServer_blockAt_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Results{root.Struct()}, err
}

func (s ZarbServer_blockAt_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_blockAt_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_blockAt_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_blockAt_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_blockAt_Results_List is a list of ZarbServer_blockAt_Results.
type ZarbServer_blockAt_Results_List struct{ capnp.List }

// NewZarbServer_blockAt_Results creates a new list of ZarbServer_blockAt_Results.
func NewZarbServer_blockAt_Results_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_blockAt_Results_List{l}, err
}

func (s ZarbServer_blockAt_Results_List) At(i int) ZarbServer_blockAt_Results {
	return ZarbServer_blockAt_Results{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Results_List) Set(i int, v ZarbServer_blockAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_blockAt_Results_Promise is a wrapper for a ZarbServer_blockAt_Results promised by a client call.
type ZarbServer_blockAt_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Results_Promise) Struct() (ZarbServer_blockAt_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Results{s}, err
}

func (p ZarbServer_blockAt_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_block_Params struct{ capnp.Struct }

// ZarbServer_block_Params_TypeID is the unique identifier for the type ZarbServer_block_Params.
const ZarbServer_block_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func NewRootZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func ReadRootZarbServer_block_Params(msg *capnp.Message) (ZarbServer_block_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Params{root.Struct()}, err
}

func (s ZarbServer_block_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_block_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_block_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_block_Params_List is a list of ZarbServer_block_Params.
type ZarbServer_block_Params_List struct{ capnp.List }

// NewZarbServer_block_Params creates a new list of ZarbServer_block_Params.
func NewZarbServer_block_Params_List(s *capnp.Segment, sz int32) (ZarbServer_block_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Params_List{l}, err
}

func (s ZarbServer_block_Params_List) At(i int) ZarbServer_block_Params {
	return ZarbServer_block_Params{s.List.Struct(i)}
}

func (s ZarbServer_block_Params_List) Set(i int, v ZarbServer_block_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_block_Params_Promise is a wrapper for a ZarbServer_block_Params promised by a client call.
type ZarbServer_block_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Params_Promise) Struct() (ZarbServer_block_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Params{s}, err
}

type ZarbServer_block_Results struct{ capnp.Struct }

// ZarbServer_block_Results_TypeID is the unique identifier for the type ZarbServer_block_Results.
const ZarbServer_block_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func NewRootZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func ReadRootZarbServer_block_Results(msg *capnp.Message) (ZarbServer_block_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Results{root.Struct()}, err
}

func (s ZarbServer_block_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_block_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_block_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_block_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_block_Results_List is a list of ZarbServer_block_Results.
type ZarbServer_block_Results_List struct{ capnp.List }

// NewZarbServer_block_Results creates a new list of ZarbServer_block_Results.
func NewZarbServer_block_Results_List(s *capnp.Segment, sz int32) (ZarbServer_block_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Results_List{l}, err
}

func (s ZarbServer_block_Results_List) At(i int) ZarbServer_block_Results {
	return ZarbServer_block_Results{s.List.Struct(i)}
}

func (s ZarbServer_block_Results_List) Set(i int, v ZarbServer_block_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_block_Results_Promise is a wrapper for a ZarbServer_block_Results promised by a client call.
type ZarbServer_block_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Results_Promise) Struct() (ZarbServer_block_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Results{s}, err
}

func (p ZarbServer_block_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_tx_Params struct{ capnp.Struct }

// ZarbServer_tx_Params_TypeID is the unique identifier for the type ZarbServer_tx_Params.
const ZarbServer_tx_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func NewRootZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func ReadRootZarbServer_tx_Params(msg *capnp.Message) (ZarbServer_tx_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Params{root.Struct()}, err
}

func (s ZarbServer_tx_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_tx_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_tx_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_tx_Params_List is a list of ZarbServer_tx_Params.
type ZarbServer_tx_Params_List struct{ capnp.List }

// NewZarbServer_tx_Params creates a new list of ZarbServer_tx_Params.
func NewZarbServer_tx_Params_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Params_List{l}, err
}

func (s ZarbServer_tx_Params_List) At(i int) ZarbServer_tx_Params {
	return ZarbServer_tx_Params{s.List.Struct(i)}
}

func (s ZarbServer_tx_Params_List) Set(i int, v ZarbServer_tx_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_tx_Params_Promise is a wrapper for a ZarbServer_tx_Params promised by a client call.
type ZarbServer_tx_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Params_Promise) Struct() (ZarbServer_tx_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Params{s}, err
}

type ZarbServer_tx_Results struct{ capnp.Struct }

// ZarbServer_tx_Results_TypeID is the unique identifier for the type ZarbServer_tx_Results.
const ZarbServer_tx_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func NewRootZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func ReadRootZarbServer_tx_Results(msg *capnp.Message) (ZarbServer_tx_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Results{root.Struct()}, err
}

func (s ZarbServer_tx_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_tx_Results) TxInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_tx_Results) HasTxInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Results) SetTxInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTxInfo sets the txInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_tx_Results) NewTxInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_tx_Results_List is a list of ZarbServer_tx_Results.
type ZarbServer_tx_Results_List struct{ capnp.List }

// NewZarbServer_tx_Results creates a new list of ZarbServer_tx_Results.
func NewZarbServer_tx_Results_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Results_List{l}, err
}

func (s ZarbServer_tx_Results_List) At(i int) ZarbServer_tx_Results {
	return ZarbServer_tx_Results{s.List.Struct(i)}
}

func (s ZarbServer_tx_Results_List) Set(i int, v ZarbServer_tx_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_tx_Results_Promise is a wrapper for a ZarbServer_tx_Results promised by a client call.
type ZarbServer_tx_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Results_Promise) Struct() (ZarbServer_tx_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Results{s}, err
}

func (p ZarbServer_tx_Results_Promise) TxInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacVmhTW\x1a~\x9fs\xe6\xe6\xced" +
	"\x133\x97;aE\xd4\xc9.\x130\xeej\xd4\xac\xbb" +
	"(\x0b\x89q\x85d\xf1G\xce\xc4B\x9b\xd6\xd2k\xe6" +
	"j\xa6\x99/\xef\xbd1!P\x02R\x7fT\xb0\xd2\xef" +
	"B\xfb\xa3-\x85\xd2\xda/\xa1\x81\x0a\x0aZ[\xb4\xa2" +
	"`\xb5B+\xad\xd2`\xa9?*6\xad\x01\xd36\x9d" +
	"\xf2\xde$\xf3\xa5\xa9\xb1\xed\xbf\xc3{\xde\xfb<\xefy" +
	"\xce\xf3\x9e\xfb\xae\xda#\xdb\xc4j\xadY#R\xff\xd5" +
	"\xaa\xf2\xe7\xe2\xc7\x8f-\xfdG\xe3\x1e2\x1a@\xa4A" +
	"'jyD<\x0c\x82\xf9\x98h%\xfcr\xea\xdc\xcd" +
	"\xa6\x13\xe3\xfbT\x03@\x14\xe0\xed\xd7\xc50o\x8f\xf2" +
	"v\xfe\xbb7\x9e\x1f\x19\xfd\xe2\xd2\xe3\xa4\xea!\xf2-" +
	"S[\x9f;\xdb?\xfa(i\xbaNd^\x10c\xe6" +
	"W\x82\xbf\xf9R\xe4A\xc8\x07\xcd7\x1f\xdc\x19\xed\x7f" +
	"\xba\x94m2\xe00\x9c\xa61\xdc\xbf/\xef\x13\xff\xfc" +
	"\xfc\xd5g\x19\x0e%p\x9ci6i\xdf\x9bk5^" +
	"\xad\xd6\x06\x09\xf9\xfa\xf8\xc1\xe1\x1d\xe3\x17^\xae\xe4\xf6" +
	"S\xf6i\x1f\x98\xcf\xf0\xaa\xe5\x09m?s\xdf?x" +
	"\xe0z\x0a\x07_)\xe5^\xa2\xf70w\x93\xce\xdc\xff" +
	"\xab\x19\xc9N=\xf5\xc3\xfbd\xd4\x97RKF\xeb\xd4" +
	"/\x9a\xf7\xf8gR\xfa;\x84|\xd3\xc4\xf2\xebo\x8d" +
	"5\x1c\xab\xc8\xf5\xcb\xbc\xa6\x9f2'\xfd\xdc\x09\x1f\xf7" +
	"P\xcf\x93\x8d\xd6\xde\xcb\xe7K\x89\x1b\x83q&^\x1d" +
	"\xe4\x84\x17.\x0dw\x1eo>r\xa5\xf2\xd0>\xb3\x0a" +
	"\xfehn\x0d\xf2\xea\xbe\xe07\x84\xfc\x7f\x0eD\x96\xec" +
	"\xef\xa8\x1a\xafLf\x99\xcd\x15\xa11s]\x88Wk" +
	"C\\\xe6\x89\xbf^\x0c\xfdt\xf6\xa5\x89\xdb\"\x7f\x1d" +
	"\x1a3\xc7\xfd\xe4k!F^\xbc\xf4\xb5\xdd/v]" +
	"\x9d(\xad\xf3X\xf5n\xae\xf3L5\xd7ye\xe4|" +
	"\xed\xdbcU\x93d\xd4\xcb\"\x18\xa1e\xbcZ\xc0\x9c" +
	"\xaaf\xa8\xc9\xea\x13\xe6\xce\xbf\xe8D\xf9\xc1\xc1\xc1\xe6" +
	"^+\x97\x09\xe4\x9a\x87-g\xdbJ^\xe7\xd6\xf7X" +
	"\xce\xb6n\xdb\xd9e;+\xb7\xa5\xb2\xbd\xfd\xb1.\xab" +
	"\xce\xb1\xd2\xae\x0a\xc8\x00Q\x00DF\xedr\"\x15\x94" +
	"P\x11\x81\xba>\xcb\xedC-\x09\xd4\x12\xe6\x09\xb9\xc1" +
	"\x8b\xb5vY\x95\xa0\xeb\x8b\xa0\xad}vrG\x9f\x87" +
	" \x09\x04K`E\x19l\x87m\xe9\x09\xdb\xe9\x02T" +
	"\xac\x00s\xad\x9dH]\x95P7\x04\x0c \xc2Ma" +
	"\x8cs\xc1\xdfJ\xa8\x9b\x02\x10\x11\x08\"c\xc2!R" +
	"7$\xe2\x100$\"\x90D\xc6T\x9cH\xfd,\xd1" +
	"\x1d\xe4h@D\x10 25\xb4\x13\xc5!\xd1]\xc3" +
	"aMF\xa0\x11\x99!\xec%\xea\xae\xe1\xf8B\x8eW" +
	"\x05\"\xa8\"2\xeb1L\xd4\x1d\xe1x\x03\xc7u-" +
	"\xe2\xdbn\x09\x1c\xa2\xee\xc5\x1c_\xc6\xf1`U\x04A" +
	"\"\xb3\x11\xbb\x89\xbac\x1c_\x05\x81\x91]\xb6\xe3&" +
	"\xb3\x19\x04H @\xa8\xf3\x92i\x1b\x1a\x09h\x84|" +
	"\xcar\xbd\xf6T\xb6\x97\xa2\xfd\x1d\xa5\xca\xbb\x9e\xe5\xd9" +
	"\x1d\x96K(\xc4F\xbc!\xb7,\x87\xbf\x8d\xdb\xbd6" +
	"\x929\xcf\xdf!*\xdb\xdb\x98M\xa7\xa95\xe9\x95}" +
	"\xd4\x9bM\xa7\x93\x9e\xedP\xb4\x1c,\xe7dsY\xd7" +
	"v\xb0!\x91pl\xd7\xa5\xbb4A,nG\xdd\x81" +
	"\x94W\xe6\x01\x96\xbfFB-\x14\xc8\xfbY\x9d\x99\xed" +
	"\x84,\xc2\xc5\x16$ <\xa7%6f\xd3Q\xbfZ" +
	"6E\xb0\x80\xdb\xc4\xa6\x88I\xa8U\x02\xb3\x9eX\xc1" +
	"~[&\xa1\xfe%0bM\x9fa\xf6\x08\xadnr" +
	"G\xc6N\x00$\x809\xc9\xb6\x0c\x11\xd3,.\xd0\x8c" +
	"\xae!R\xefJ\xa8\xc3%\xde;\xc4<\xefI\xa8\xa3" +
	"\x02\x86\x981\xdf\x91\xff\x13\xa9\xc3\x12\xea\xa4\x00\xe4\xb4" +
	"\xf7>\xe2\xc4\xa3\x12\xea4[\x0f\xbe\xf5\x8c\x8f\xffN" +
	"\xa4>\x94Pg\x8b\xc63\xce\xb0\x9dOJ\xa8O\x8b" +
	"\xae3>\xe1\xe0i\x09\xf5\x99@\xd4\xf5\xact\xaex" +
	"\x1a;\x93\xb0\x9d\xc2\xfd8v\xaf\x9d\xdce;T\xbc" +
	"\xfeV+\x9d\x1d\xc8x\x08\x91@\x88\xa0o\xb7\xed\xd9" +
	"u]\xc2\xf2\xac\xd9\xbc\xba\xb4\x9d\xce\xa2\x86\x04j\xe6" +
	"s\xd1\xdeP,n\xbb\x03)\xe9\xcd\xd9\xe9\xdePg" +
	"f\xfb\xfc/\xb8=\x95\x95\xbd\xfd,{M\x01o\x13" +
	"\xe3\xb5I\xa8\xcd%\xb2w\xf6\x10\xa9\x0e\x09\xb5\xa5D" +
	"v\xc5jn\x96P\xf7\xfao\x8c\xc5\xaa\x84\x8b\x7f\xc8" +
	"\x19\xe6B+\xc8\xa4\x87p\xf1=\x9f\xde\xd6\xbd!\x17" +
	"\xe1\xe2\xff\xe57\xcb\xdd2\xe4\x92o\x92\xdb\x9c>\xc6" +
	"5Xn\x9f\xedb\x01\xa1K\xc2\x17y\xc1<u\xf5" +
	"\xdfO\xdc\xdd\xab|\x8b\x94\xad~\x83e\xb9\xc0p\x01" +
	"\xc7b\x9c\x07$T_\xb1Yl.\xfa!\x09\x95b" +
	"51\xadf\x92\x13\x13\x12*\xc7/\xa8\x98vq\x9a" +
	"{\xa0OBy\x15UT\xbc\xe9e\xb6\x8a\xfa\xbd\x8e" +
	"p\xf1\x0f\x7f\xa7.\xd7\xd3I\xaf\xc2\x05k\x8a.(" +
	"\x98 ^j\x82\x99\xb2\x15\x07\xbb\xa6\xcf\x12u\xb2\x03" +
	"\x99D\xe1?\xc3moy\x03\x0e\xc1\xbe\xf5\xfdC\xe1" +
	"\x9e\xc2\xc5)\x88Pvc\x95\xb7\xdf\xa9\xff\xd9\xf2." +
	"\xfa\x1d\xf2Jo\x08\xe1\xe20V\xa1\xadv\xa7\x7f\xb5" +
	"\xdf\xc2\x9eK\x7f\xec\xa1\x96s\xd0\xd0\xf45jD\xb3" +
	"\x93l\xc9\x9c\xa3\xdaI\x18\x9bt\xa00\x06cvB" +
	"5\xd6\xad!a\xac\xd0!\x0a\xf3\x1bf'H\xe3o" +
	"\x8bH\x18\xf5\xfa\xc8\xcc\x11\xdaf\x1c\xd6\xc6R\xb4\xa1" +
	"\x0b\xf85\x00\x00\xff\xff\x85\xdf\xc4\xc8"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x85252b1ec1c352d2,
		0x8df1c729f8d2ca00,
		0x8ededcb57f98aaf0,
		0x946b1f715eac1308,
		0x96a4d92c028ddf36,
		0xa1d5f1677ab15215,
		0xa2b1016cefab775b,
		0xb8f393fd6f7f0c44,
		0xc120e2adef2af529,
		0xd3df8a6125925ab9,
		0xe4bd2fc3497ade9b,
		0xf106488f1d14ab37,
		0xf5a0d0fb09da17c7,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4)
}
