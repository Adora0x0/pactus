// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastReceiptsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastReceiptsHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastReceiptsHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) LastCommitHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasLastCommitHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCommitHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) CommittersHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasCommittersHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetCommittersHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(6, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Committer struct{ capnp.Struct }

// Committer_TypeID is the unique identifier for the type Committer.
const Committer_TypeID = 0xb875c9f86444f7cc

func NewCommitter(s *capnp.Segment) (Committer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Committer{st}, err
}

func NewRootCommitter(s *capnp.Segment) (Committer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Committer{st}, err
}

func ReadRootCommitter(msg *capnp.Message) (Committer, error) {
	root, err := msg.RootPtr()
	return Committer{root.Struct()}, err
}

func (s Committer) String() string {
	str, _ := text.Marshal(0xb875c9f86444f7cc, s.Struct)
	return str
}

func (s Committer) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Committer) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Committer) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Committer) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Committer) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Committer_List is a list of Committer.
type Committer_List struct{ capnp.List }

// NewCommitter creates a new list of Committer.
func NewCommitter_List(s *capnp.Segment, sz int32) (Committer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Committer_List{l}, err
}

func (s Committer_List) At(i int) Committer { return Committer{s.List.Struct(i)} }

func (s Committer_List) Set(i int, v Committer) error { return s.List.SetStruct(i, v.Struct) }

func (s Committer_List) String() string {
	str, _ := text.MarshalList(0xb875c9f86444f7cc, s.List)
	return str
}

// Committer_Promise is a wrapper for a Committer promised by a client call.
type Committer_Promise struct{ *capnp.Pipeline }

func (p Committer_Promise) Struct() (Committer, error) {
	s, err := p.Pipeline.Struct()
	return Committer{s}, err
}

type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xf106488f1d14ab37

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xf106488f1d14ab37, s.Struct)
	return str
}

func (s Commit) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Commit) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Commit) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasSignature() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetSignature(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Committers() (Committer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Committer_List{List: p.List()}, err
}

func (s Commit) HasCommitters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) SetCommitters(v Committer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated Committer_List, preferring placement in s's segment.
func (s Commit) NewCommitters(n int32) (Committer_List, error) {
	l, err := NewCommitter_List(s.Struct.Segment(), n)
	if err != nil {
		return Committer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xf106488f1d14ab37, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(1)
	return Commit{Struct: p.Struct()}, err
}

func (s Block) HasLastCommit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Block) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(2)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockInfo struct{ capnp.Struct }

// BlockInfo_TypeID is the unique identifier for the type BlockInfo.
const BlockInfo_TypeID = 0xe4bd2fc3497ade9b

func NewBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func NewRootBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func ReadRootBlockInfo(msg *capnp.Message) (BlockInfo, error) {
	root, err := msg.RootPtr()
	return BlockInfo{root.Struct()}, err
}

func (s BlockInfo) String() string {
	str, _ := text.Marshal(0xe4bd2fc3497ade9b, s.Struct)
	return str
}

func (s BlockInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockInfo) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockInfo) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockInfo) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockInfo_List is a list of BlockInfo.
type BlockInfo_List struct{ capnp.List }

// NewBlockInfo creates a new list of BlockInfo.
func NewBlockInfo_List(s *capnp.Segment, sz int32) (BlockInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockInfo_List{l}, err
}

func (s BlockInfo_List) At(i int) BlockInfo { return BlockInfo{s.List.Struct(i)} }

func (s BlockInfo_List) Set(i int, v BlockInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockInfo_List) String() string {
	str, _ := text.MarshalList(0xe4bd2fc3497ade9b, s.List)
	return str
}

// BlockInfo_Promise is a wrapper for a BlockInfo promised by a client call.
type BlockInfo_Promise struct{ *capnp.Pipeline }

func (p BlockInfo_Promise) Struct() (BlockInfo, error) {
	s, err := p.Pipeline.Struct()
	return BlockInfo{s}, err
}

func (p BlockInfo_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xa1d5f1677ab15215

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xa1d5f1677ab15215, s.Struct)
	return str
}

func (s Tx) Stamp() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Tx) HasStamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetStamp(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Tx) Sender() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Tx) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetSender(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Tx) Receiver() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx) HasReceiver() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetReceiver(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Tx) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Tx) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Tx) Fee() uint64 {
	return s.Struct.Uint64(8)
}

func (s Tx) SetFee(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Tx) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Tx) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Tx) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Tx) Memo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Tx) HasMemo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Tx) MemoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Tx) SetMemo(v string) error {
	return s.Struct.SetText(4, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xa1d5f1677ab15215, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

type TxInfo struct{ capnp.Struct }

// TxInfo_TypeID is the unique identifier for the type TxInfo.
const TxInfo_TypeID = 0xf5a0d0fb09da17c7

func NewTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func NewRootTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func ReadRootTxInfo(msg *capnp.Message) (TxInfo, error) {
	root, err := msg.RootPtr()
	return TxInfo{root.Struct()}, err
}

func (s TxInfo) String() string {
	str, _ := text.Marshal(0xf5a0d0fb09da17c7, s.Struct)
	return str
}

func (s TxInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s TxInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TxInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxInfo) Tx() (Tx, error) {
	p, err := s.Struct.Ptr(2)
	return Tx{Struct: p.Struct()}, err
}

func (s TxInfo) HasTx() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetTx(v Tx) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTx sets the tx field to a newly
// allocated Tx struct, preferring placement in s's segment.
func (s TxInfo) NewTx() (Tx, error) {
	ss, err := NewTx(s.Struct.Segment())
	if err != nil {
		return Tx{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// TxInfo_List is a list of TxInfo.
type TxInfo_List struct{ capnp.List }

// NewTxInfo creates a new list of TxInfo.
func NewTxInfo_List(s *capnp.Segment, sz int32) (TxInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return TxInfo_List{l}, err
}

func (s TxInfo_List) At(i int) TxInfo { return TxInfo{s.List.Struct(i)} }

func (s TxInfo_List) Set(i int, v TxInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s TxInfo_List) String() string {
	str, _ := text.MarshalList(0xf5a0d0fb09da17c7, s.List)
	return str
}

// TxInfo_Promise is a wrapper for a TxInfo promised by a client call.
type TxInfo_Promise struct{ *capnp.Pipeline }

func (p TxInfo_Promise) Struct() (TxInfo, error) {
	s, err := p.Pipeline.Struct()
	return TxInfo{s}, err
}

func (p TxInfo_Promise) Tx() Tx_Promise {
	return Tx_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) BlockAt(ctx context.Context, params func(ZarbServer_blockAt_Params) error, opts ...capnp.CallOption) ZarbServer_blockAt_Results_Promise {
	if c.Client == nil {
		return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_blockAt_Params{Struct: s}) }
	}
	return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Block(ctx context.Context, params func(ZarbServer_block_Params) error, opts ...capnp.CallOption) ZarbServer_block_Results_Promise {
	if c.Client == nil {
		return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_block_Params{Struct: s}) }
	}
	return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Tx(ctx context.Context, params func(ZarbServer_tx_Params) error, opts ...capnp.CallOption) ZarbServer_tx_Results_Promise {
	if c.Client == nil {
		return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_tx_Params{Struct: s}) }
	}
	return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	BlockAt(ZarbServer_blockAt) error

	Block(ZarbServer_block) error

	Tx(ZarbServer_tx) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_blockAt{c, opts, ZarbServer_blockAt_Params{Struct: p}, ZarbServer_blockAt_Results{Struct: r}}
			return s.BlockAt(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_block{c, opts, ZarbServer_block_Params{Struct: p}, ZarbServer_block_Results{Struct: r}}
			return s.Block(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_tx{c, opts, ZarbServer_tx_Params{Struct: p}, ZarbServer_tx_Results{Struct: r}}
			return s.Tx(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_blockAt holds the arguments for a server call to ZarbServer.blockAt.
type ZarbServer_blockAt struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_blockAt_Params
	Results ZarbServer_blockAt_Results
}

// ZarbServer_block holds the arguments for a server call to ZarbServer.block.
type ZarbServer_block struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_block_Params
	Results ZarbServer_block_Results
}

// ZarbServer_tx holds the arguments for a server call to ZarbServer.tx.
type ZarbServer_tx struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_tx_Params
	Results ZarbServer_tx_Results
}

type ZarbServer_blockAt_Params struct{ capnp.Struct }

// ZarbServer_blockAt_Params_TypeID is the unique identifier for the type ZarbServer_blockAt_Params.
const ZarbServer_blockAt_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func NewRootZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func ReadRootZarbServer_blockAt_Params(msg *capnp.Message) (ZarbServer_blockAt_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Params{root.Struct()}, err
}

func (s ZarbServer_blockAt_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Params) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s ZarbServer_blockAt_Params) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ZarbServer_blockAt_Params_List is a list of ZarbServer_blockAt_Params.
type ZarbServer_blockAt_Params_List struct{ capnp.List }

// NewZarbServer_blockAt_Params creates a new list of ZarbServer_blockAt_Params.
func NewZarbServer_blockAt_Params_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_blockAt_Params_List{l}, err
}

func (s ZarbServer_blockAt_Params_List) At(i int) ZarbServer_blockAt_Params {
	return ZarbServer_blockAt_Params{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Params_List) Set(i int, v ZarbServer_blockAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_blockAt_Params_Promise is a wrapper for a ZarbServer_blockAt_Params promised by a client call.
type ZarbServer_blockAt_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Params_Promise) Struct() (ZarbServer_blockAt_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Params{s}, err
}

type ZarbServer_blockAt_Results struct{ capnp.Struct }

// ZarbServer_blockAt_Results_TypeID is the unique identifier for the type ZarbServer_blockAt_Results.
const ZarbServer_blockAt_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func NewRootZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func ReadRootZarbServer_blockAt_Results(msg *capnp.Message) (ZarbServer_blockAt_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Results{root.Struct()}, err
}

func (s ZarbServer_blockAt_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_blockAt_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_blockAt_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_blockAt_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_blockAt_Results_List is a list of ZarbServer_blockAt_Results.
type ZarbServer_blockAt_Results_List struct{ capnp.List }

// NewZarbServer_blockAt_Results creates a new list of ZarbServer_blockAt_Results.
func NewZarbServer_blockAt_Results_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_blockAt_Results_List{l}, err
}

func (s ZarbServer_blockAt_Results_List) At(i int) ZarbServer_blockAt_Results {
	return ZarbServer_blockAt_Results{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Results_List) Set(i int, v ZarbServer_blockAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_blockAt_Results_Promise is a wrapper for a ZarbServer_blockAt_Results promised by a client call.
type ZarbServer_blockAt_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Results_Promise) Struct() (ZarbServer_blockAt_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Results{s}, err
}

func (p ZarbServer_blockAt_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_block_Params struct{ capnp.Struct }

// ZarbServer_block_Params_TypeID is the unique identifier for the type ZarbServer_block_Params.
const ZarbServer_block_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func NewRootZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func ReadRootZarbServer_block_Params(msg *capnp.Message) (ZarbServer_block_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Params{root.Struct()}, err
}

func (s ZarbServer_block_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_block_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_block_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_block_Params_List is a list of ZarbServer_block_Params.
type ZarbServer_block_Params_List struct{ capnp.List }

// NewZarbServer_block_Params creates a new list of ZarbServer_block_Params.
func NewZarbServer_block_Params_List(s *capnp.Segment, sz int32) (ZarbServer_block_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Params_List{l}, err
}

func (s ZarbServer_block_Params_List) At(i int) ZarbServer_block_Params {
	return ZarbServer_block_Params{s.List.Struct(i)}
}

func (s ZarbServer_block_Params_List) Set(i int, v ZarbServer_block_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_block_Params_Promise is a wrapper for a ZarbServer_block_Params promised by a client call.
type ZarbServer_block_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Params_Promise) Struct() (ZarbServer_block_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Params{s}, err
}

type ZarbServer_block_Results struct{ capnp.Struct }

// ZarbServer_block_Results_TypeID is the unique identifier for the type ZarbServer_block_Results.
const ZarbServer_block_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func NewRootZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func ReadRootZarbServer_block_Results(msg *capnp.Message) (ZarbServer_block_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Results{root.Struct()}, err
}

func (s ZarbServer_block_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_block_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_block_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_block_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_block_Results_List is a list of ZarbServer_block_Results.
type ZarbServer_block_Results_List struct{ capnp.List }

// NewZarbServer_block_Results creates a new list of ZarbServer_block_Results.
func NewZarbServer_block_Results_List(s *capnp.Segment, sz int32) (ZarbServer_block_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Results_List{l}, err
}

func (s ZarbServer_block_Results_List) At(i int) ZarbServer_block_Results {
	return ZarbServer_block_Results{s.List.Struct(i)}
}

func (s ZarbServer_block_Results_List) Set(i int, v ZarbServer_block_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_block_Results_Promise is a wrapper for a ZarbServer_block_Results promised by a client call.
type ZarbServer_block_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Results_Promise) Struct() (ZarbServer_block_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Results{s}, err
}

func (p ZarbServer_block_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_tx_Params struct{ capnp.Struct }

// ZarbServer_tx_Params_TypeID is the unique identifier for the type ZarbServer_tx_Params.
const ZarbServer_tx_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func NewRootZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func ReadRootZarbServer_tx_Params(msg *capnp.Message) (ZarbServer_tx_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Params{root.Struct()}, err
}

func (s ZarbServer_tx_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_tx_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_tx_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_tx_Params_List is a list of ZarbServer_tx_Params.
type ZarbServer_tx_Params_List struct{ capnp.List }

// NewZarbServer_tx_Params creates a new list of ZarbServer_tx_Params.
func NewZarbServer_tx_Params_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Params_List{l}, err
}

func (s ZarbServer_tx_Params_List) At(i int) ZarbServer_tx_Params {
	return ZarbServer_tx_Params{s.List.Struct(i)}
}

func (s ZarbServer_tx_Params_List) Set(i int, v ZarbServer_tx_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_tx_Params_Promise is a wrapper for a ZarbServer_tx_Params promised by a client call.
type ZarbServer_tx_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Params_Promise) Struct() (ZarbServer_tx_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Params{s}, err
}

type ZarbServer_tx_Results struct{ capnp.Struct }

// ZarbServer_tx_Results_TypeID is the unique identifier for the type ZarbServer_tx_Results.
const ZarbServer_tx_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func NewRootZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func ReadRootZarbServer_tx_Results(msg *capnp.Message) (ZarbServer_tx_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Results{root.Struct()}, err
}

func (s ZarbServer_tx_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_tx_Results) TxInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_tx_Results) HasTxInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Results) SetTxInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTxInfo sets the txInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_tx_Results) NewTxInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_tx_Results_List is a list of ZarbServer_tx_Results.
type ZarbServer_tx_Results_List struct{ capnp.List }

// NewZarbServer_tx_Results creates a new list of ZarbServer_tx_Results.
func NewZarbServer_tx_Results_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Results_List{l}, err
}

func (s ZarbServer_tx_Results_List) At(i int) ZarbServer_tx_Results {
	return ZarbServer_tx_Results{s.List.Struct(i)}
}

func (s ZarbServer_tx_Results_List) Set(i int, v ZarbServer_tx_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_tx_Results_Promise is a wrapper for a ZarbServer_tx_Results promised by a client call.
type ZarbServer_tx_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Results_Promise) Struct() (ZarbServer_tx_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Results{s}, err
}

func (p ZarbServer_tx_Results_Promise) TxInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacVohS\xe7\x17>\xe7}ss\x93\xfe" +
	"Z\x9b\xcbM\xf9\x89\xa8\xedF\x0a\xd6Q\xabvc(" +
	"\x83\xd4\xaa\xd0\x0e?\xf4M\x1dl\xdd\x1c\xbb6W\x93" +
	"5\xc9\x8d\xf7\xbe\xb1\xa50\x022?L\xd8\x84m\xb0" +
	"\xc1\xf6a\xdb\x97\xb1\xb9\x7f\xc2\x0a\x0a\x0a:'\xfeA" +
	"\xc1\xe9\x84!\x9bcE\x99\x1fV\\\x98e\xd6\xad\xcb" +
	"87Mn\x12-\xd6m\xdf^\xce{\xees\xce}" +
	"\xces\xce{V\xef\xe5=l\x8d\xd2\xa5\x00\x88'\x14" +
	"\x7f\xf1b\xec\xc4\xf1\xe5\x8f\xb4\xef\x05\xad\x0d\x01\x14T" +
	"\x01\xba_b/\"\xa0\xfe\x0a\x8b\x02\xfeu\xf6\xe2\xed" +
	"\x8eS\x85WE\x1b\"\x80\x8f\xae?b\xe3t=A" +
	"\xd7\xc5_?~;?\xf1\xfd\xd5\xd7@\xb4 +v" +
	"\xcfn{\xeb\xc2\xc8\xc4\xcb\xa0\xa8*\x80~\x99M\xea" +
	"?1\xfa\xe6\x07VD\xc0b@\xff\xe4\xf9]\xad#" +
	"oVG\x9b\xf1\xd9\x04\xa7(\x04\xd7\x12;8\xbe\xb3" +
	"p\xf9\xfdz8\x85\xe0:\x94\xaf\xf45t\xea\xeeT" +
	"\xf6\x13\xdc\xb3\xa3\x07n\xa6\xf0\xe0\x07\xd5p\x87\xfdC" +
	"\x04w\xd2Op\xe7~\xdf\x14\xbf}&w\x88\xe0\xb0" +
	"\x0a\x8e<\xf5\xeb\xfe;z\xc1O\xa7)\xff(`q" +
	"Sc\xde\x9a}\xe3\xb7C\xa0\xb5T\xfbr\xf2\xe8W" +
	"\xaf\xe8O\xb9\xff$\xd4\xcf\x01\x8b\x1d\xd3+o~:" +
	"\xd9v\xbc\xce\xd7\xc5\x9dR\xcf\xea3\xae\xef\xb4JI" +
	"\x1c\x1ez\xbd\xdd\xd8\xf7\xe3\xa5\xea,\xdb\x031\xcar" +
	"M\x80\x1c\xde\xb9:\xde\x7f\xa2\xeb\xe8\xb5\xfa,\xdd\xc8" +
	"\"pG\xdf\x16\xa0\xd33\x81\x9f\x01\x8b\x8f\x1f\x08/" +
	"\xdb\xdf\xe7/\xd4;\x13\xcdzgpR_\x17\xa4\xd3" +
	"cAJ\xf3\xd4\xff\xaf\x04\xff\xb8\xf0\xde\xf4=\x91\xaf" +
	"\x07'\xf5\x82\xeb<\x15$\xe4\xa5\xcb?\xdc\xf3\xee\xc0" +
	"\x8d\xe9\xea<\x8f7\xec\xa1<\xcf7P\x9e\xd7\xf2\x97" +
	"\x9a>\x9b\xf4\xcf\x80\xd6\xc2=0\xc0\xeeB\x03C}" +
	"\xb6\x81\xa0f\x1aN\xe9\xbb\xfe\xa7\x02\x14GGG\xbb" +
	"\x86\x8dl\xc6\x97\xed\x1a7\xec\xed\xab\xe8\x9c]?d" +
	"\xd8\xdb\x07M{\xb7i\xaf\xda\x9e\xb2\x86G\"\x03F" +
	"\xb3m\xa4\x1d\xe1\xe3>\x00\x1f\x02hM+\x01D\x80" +
	"\xa3\x083lN\x18N\x02\x9b\x80a\x13\xe0\x02!7" +
	"\xc8Ht\xc0\xa8\x07]\xef\x81F\x13frgBb" +
	"\x00\x18\x06\xaa`Y\x0dl\x9fi\xa8q\xd3\x1e@\x14" +
	"\x91\x0a\xccT/\x80\xb8\xc1Q\xdcb\xa8!\x86\xa9)" +
	"\xb4\x02%\xfc\x0bGq\x9b!\xb202\x00m\xda\x06" +
	"\x10\xb78\xc6\x90\xa1\xc61\x8c\x1c@\x9b\x8d\x01\x88?" +
	"9\x0e\x06\xc8\xeaca\xf4\x01\xe8\x0a\xf6\x02\xc4\x90\xe3" +
	"`#\x99\x15\x1eF\x05@\x0f\xe2>\x80\xc1F\xb2/" +
	"&\xbb\xdf\x17F?\x80\xde\x82\xe3\x00\x83a\xb2\xb7\x91" +
	"]U\xc2\xae\xec\x96\xb9\xf6\xa5d_A\xf6\x80?\x8c" +
	"\x01\x00\xbd\x1d\xf7\x00\x0cF\xc8\xbe\x1a\x19\xe6w\x9b\xb6" +
	"\x93\xb42\xe8\x03\x86>\xc0f\x99L\x9b\xa8\x00C\x05" +
	"\xb0\x982\x1c\xd9\x9b\xb2\x86\xa1u\xa4\xaf\x9ayG\x1a" +
	"\xd2\xec3\x1c\xc0\x8a-/\xc7\x9c\x1a\x1f\xfa6f\x0e" +
	"\x9b\x98\xccJ\xf7\x06\xa0\xe6n\xa3\x95NC4)k" +
	">\x1a\xb6\xd2\xe9\xa4\x94&D\xedZ\xb4\xacme-" +
	"\xc7\xb4qC<n\x9b\x8e\x03\x0f\xa8\x82H\xcclu" +
	"r)Y#\x02\xe2\xbf\x91\xa3X\xcc\xb0\xe8z\xf5g" +
	"v\x00Z\x18\xf2z\x10\x10C\xf3jb\xeb\x18\x90\x1e" +
	"\x96V\x10'\xd6\x02\x88/8\x8a#Uz8LZ" +
	"\xfb\x92\xa38\xc6Pcs\x828\xfa$\x808\xc2Q" +
	"\x9cf\x88\xbc\xa4\x87\x93\xe4x\x8c\xa38Gr@W" +
	"\x0e\xda\x99\x87\x01\xc4\xd7\x1c\xc5\x05O\x0c\xday\x92\xd8" +
	"i\x8e\xe2[O\x09\xda7d<\xc7Q|\xc7\xb0\xd5" +
	"\x91F:[\xe6(\xea\x98\x99\xb8iW(\xb3\xcda" +
	"3\xb9\xdb\xb4\xc1+I\xd4H[\xb9\x8c\xc4 0\x0c" +
	"\x02\xaa;L\xb3|n\x8e\x1b\xd2(\xfb5\xa7\xcd\xb4" +
	"\x85\x8d\xc0\xb0q!\xdc\xcb\xb1H\xcctr).\xe7" +
	"\xed>9\xd6\x9f\xd9\xb1p\xce7Z\xe9\xa8+\x11\xb7" +
	"\x15\x03\x15\xcc\x0ej\xc5\x08G\xb1\x9aa\x99\xf9N\x8a" +
	"\xb3\x82\xa3x\x94a\xde(\x09\xc7\xe3D\x1a2\xe7\x94" +
	"u?O\xb4\xde\x94\xc5\x87G(Rc%\xd2fB" +
	"\xed\xe1(\xb6T\x15\xb9\x7f\x08@\xf4q\x14[\xab\x8a" +
	",\xa8v[8\x8a\xa7\xdd)cP\x0dB\xde\x1b9" +
	"\xf7\x9f\x95f\xe0I\x89!o\xa2\x97\xaeU9\xe6`" +
	"\xc8{a\xee#H\x07\\I\xde\x83\xeb\x08\xe5`8" +
	"\x09\xd3\xc1E\x80\x03\x1c]&\x16-\xb0\x8a\xee\x04\xc5" +
	"\x07\x9b\xcbwQ\x19u;\xcc\xa2\x04C\x15\x1c\x83p" +
	"\x9e\xe3(\x12^\xe1LJ\xfa\x05\x8e\"Elb\x89" +
	"\xcd$9\xc69\x8a,\xcdPV\xea\x994u\\\x82" +
	"\xa3\x90uY\xd4M\xf5\x1a\x11\xb7\xba\xcd\x8e!\xef\x8d" +
	"\xbf\x9f\xe4\xd4tR\xd6\xa9`\xad\xa7\x82\x8a\x08b\xd5" +
	"\"\x98K[\x902\x06J\xff\xd2j[\xb9L\xbc\xf2" +
	"\xd28\xc9\x9d\x19C\xe6l@\xf3\xee\x09\xc8\xedJ\xa1" +
	"B\xde\xe6\x02XS\xb2\xfa\xf2\xf7\xab\xff5\xbfK\xfe" +
	"\x01\xbf\\\x8ea\xc8[\xde\xea\xc8U\xee\xf7\\\xbb\x13" +
	"C:\xf0\xefF5\x9f'\x0c\x94\xea\xa8\x00\x94\x97\xd9" +
	"\xaaUG\xf4\x02\xd36\xab\x88\x95M\x18\xcbK\xaa\xb6" +
	"n-0\xadSEVY\xe1\xb0\xbcqj\x0f-\x01" +
	"\xa6\xb5\xa8\xf9\xb9_\xe8\x99\x93X\x0fQ\xd1\x83\x03\x88" +
	"\x7f\x07\x00\x00\xff\xffy\x80\xcb\xdb"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x85252b1ec1c352d2,
		0x8df1c729f8d2ca00,
		0x8ededcb57f98aaf0,
		0x946b1f715eac1308,
		0xa1d5f1677ab15215,
		0xa2b1016cefab775b,
		0xb875c9f86444f7cc,
		0xb8f393fd6f7f0c44,
		0xc120e2adef2af529,
		0xd3df8a6125925ab9,
		0xe4bd2fc3497ade9b,
		0xf106488f1d14ab37,
		0xf5a0d0fb09da17c7,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4)
}
