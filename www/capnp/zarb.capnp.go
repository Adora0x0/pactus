// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastReceiptsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastReceiptsHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastReceiptsHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) NextCommitersHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasNextCommitersHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetNextCommitersHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(6)
	return Commit{Struct: p.Struct()}, err
}

func (s Header) HasLastCommit() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Header) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

func (p Header_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(6)}
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Commiter struct{ capnp.Struct }

// Commiter_TypeID is the unique identifier for the type Commiter.
const Commiter_TypeID = 0x96a4d92c028ddf36

func NewCommiter(s *capnp.Segment) (Commiter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Commiter{st}, err
}

func NewRootCommiter(s *capnp.Segment) (Commiter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Commiter{st}, err
}

func ReadRootCommiter(msg *capnp.Message) (Commiter, error) {
	root, err := msg.RootPtr()
	return Commiter{root.Struct()}, err
}

func (s Commiter) String() string {
	str, _ := text.Marshal(0x96a4d92c028ddf36, s.Struct)
	return str
}

func (s Commiter) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commiter) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commiter) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commiter) Signed() bool {
	return s.Struct.Bit(0)
}

func (s Commiter) SetSigned(v bool) {
	s.Struct.SetBit(0, v)
}

// Commiter_List is a list of Commiter.
type Commiter_List struct{ capnp.List }

// NewCommiter creates a new list of Commiter.
func NewCommiter_List(s *capnp.Segment, sz int32) (Commiter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Commiter_List{l}, err
}

func (s Commiter_List) At(i int) Commiter { return Commiter{s.List.Struct(i)} }

func (s Commiter_List) Set(i int, v Commiter) error { return s.List.SetStruct(i, v.Struct) }

func (s Commiter_List) String() string {
	str, _ := text.MarshalList(0x96a4d92c028ddf36, s.List)
	return str
}

// Commiter_Promise is a wrapper for a Commiter promised by a client call.
type Commiter_Promise struct{ *capnp.Pipeline }

func (p Commiter_Promise) Struct() (Commiter, error) {
	s, err := p.Pipeline.Struct()
	return Commiter{s}, err
}

type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xf106488f1d14ab37

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xf106488f1d14ab37, s.Struct)
	return str
}

func (s Commit) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Commit) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Commit) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasSignature() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetSignature(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Commiters() (Commiter_List, error) {
	p, err := s.Struct.Ptr(1)
	return Commiter_List{List: p.List()}, err
}

func (s Commit) HasCommiters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) SetCommiters(v Commiter_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommiters sets the commiters field to a newly
// allocated Commiter_List, preferring placement in s's segment.
func (s Commit) NewCommiters(n int32) (Commiter_List, error) {
	l, err := NewCommiter_List(s.Struct.Segment(), n)
	if err != nil {
		return Commiter_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xf106488f1d14ab37, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(1)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(2)
	return Commit{Struct: p.Struct()}, err
}

func (s Block) HasLastCommit() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Block) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockInfo struct{ capnp.Struct }

// BlockInfo_TypeID is the unique identifier for the type BlockInfo.
const BlockInfo_TypeID = 0xe4bd2fc3497ade9b

func NewBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func NewRootBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func ReadRootBlockInfo(msg *capnp.Message) (BlockInfo, error) {
	root, err := msg.RootPtr()
	return BlockInfo{root.Struct()}, err
}

func (s BlockInfo) String() string {
	str, _ := text.Marshal(0xe4bd2fc3497ade9b, s.Struct)
	return str
}

func (s BlockInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockInfo) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockInfo) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockInfo) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockInfo_List is a list of BlockInfo.
type BlockInfo_List struct{ capnp.List }

// NewBlockInfo creates a new list of BlockInfo.
func NewBlockInfo_List(s *capnp.Segment, sz int32) (BlockInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockInfo_List{l}, err
}

func (s BlockInfo_List) At(i int) BlockInfo { return BlockInfo{s.List.Struct(i)} }

func (s BlockInfo_List) Set(i int, v BlockInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockInfo_List) String() string {
	str, _ := text.MarshalList(0xe4bd2fc3497ade9b, s.List)
	return str
}

// BlockInfo_Promise is a wrapper for a BlockInfo promised by a client call.
type BlockInfo_Promise struct{ *capnp.Pipeline }

func (p BlockInfo_Promise) Struct() (BlockInfo, error) {
	s, err := p.Pipeline.Struct()
	return BlockInfo{s}, err
}

func (p BlockInfo_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xa1d5f1677ab15215

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xa1d5f1677ab15215, s.Struct)
	return str
}

func (s Tx) Stamp() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Tx) HasStamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetStamp(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Tx) Sender() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Tx) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetSender(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Tx) Receiver() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx) HasReceiver() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetReceiver(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Tx) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Tx) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Tx) Fee() uint64 {
	return s.Struct.Uint64(8)
}

func (s Tx) SetFee(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Tx) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Tx) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Tx) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Tx) Memo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Tx) HasMemo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Tx) MemoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Tx) SetMemo(v string) error {
	return s.Struct.SetText(4, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xa1d5f1677ab15215, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

type TxInfo struct{ capnp.Struct }

// TxInfo_TypeID is the unique identifier for the type TxInfo.
const TxInfo_TypeID = 0xf5a0d0fb09da17c7

func NewTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func NewRootTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func ReadRootTxInfo(msg *capnp.Message) (TxInfo, error) {
	root, err := msg.RootPtr()
	return TxInfo{root.Struct()}, err
}

func (s TxInfo) String() string {
	str, _ := text.Marshal(0xf5a0d0fb09da17c7, s.Struct)
	return str
}

func (s TxInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s TxInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TxInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxInfo) Tx() (Tx, error) {
	p, err := s.Struct.Ptr(2)
	return Tx{Struct: p.Struct()}, err
}

func (s TxInfo) HasTx() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetTx(v Tx) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTx sets the tx field to a newly
// allocated Tx struct, preferring placement in s's segment.
func (s TxInfo) NewTx() (Tx, error) {
	ss, err := NewTx(s.Struct.Segment())
	if err != nil {
		return Tx{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// TxInfo_List is a list of TxInfo.
type TxInfo_List struct{ capnp.List }

// NewTxInfo creates a new list of TxInfo.
func NewTxInfo_List(s *capnp.Segment, sz int32) (TxInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return TxInfo_List{l}, err
}

func (s TxInfo_List) At(i int) TxInfo { return TxInfo{s.List.Struct(i)} }

func (s TxInfo_List) Set(i int, v TxInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s TxInfo_List) String() string {
	str, _ := text.MarshalList(0xf5a0d0fb09da17c7, s.List)
	return str
}

// TxInfo_Promise is a wrapper for a TxInfo promised by a client call.
type TxInfo_Promise struct{ *capnp.Pipeline }

func (p TxInfo_Promise) Struct() (TxInfo, error) {
	s, err := p.Pipeline.Struct()
	return TxInfo{s}, err
}

func (p TxInfo_Promise) Tx() Tx_Promise {
	return Tx_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) BlockAt(ctx context.Context, params func(ZarbServer_blockAt_Params) error, opts ...capnp.CallOption) ZarbServer_blockAt_Results_Promise {
	if c.Client == nil {
		return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_blockAt_Params{Struct: s}) }
	}
	return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Block(ctx context.Context, params func(ZarbServer_block_Params) error, opts ...capnp.CallOption) ZarbServer_block_Results_Promise {
	if c.Client == nil {
		return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_block_Params{Struct: s}) }
	}
	return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Tx(ctx context.Context, params func(ZarbServer_tx_Params) error, opts ...capnp.CallOption) ZarbServer_tx_Results_Promise {
	if c.Client == nil {
		return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_tx_Params{Struct: s}) }
	}
	return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	BlockAt(ZarbServer_blockAt) error

	Block(ZarbServer_block) error

	Tx(ZarbServer_tx) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_blockAt{c, opts, ZarbServer_blockAt_Params{Struct: p}, ZarbServer_blockAt_Results{Struct: r}}
			return s.BlockAt(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_block{c, opts, ZarbServer_block_Params{Struct: p}, ZarbServer_block_Results{Struct: r}}
			return s.Block(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_tx{c, opts, ZarbServer_tx_Params{Struct: p}, ZarbServer_tx_Results{Struct: r}}
			return s.Tx(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_blockAt holds the arguments for a server call to ZarbServer.blockAt.
type ZarbServer_blockAt struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_blockAt_Params
	Results ZarbServer_blockAt_Results
}

// ZarbServer_block holds the arguments for a server call to ZarbServer.block.
type ZarbServer_block struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_block_Params
	Results ZarbServer_block_Results
}

// ZarbServer_tx holds the arguments for a server call to ZarbServer.tx.
type ZarbServer_tx struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_tx_Params
	Results ZarbServer_tx_Results
}

type ZarbServer_blockAt_Params struct{ capnp.Struct }

// ZarbServer_blockAt_Params_TypeID is the unique identifier for the type ZarbServer_blockAt_Params.
const ZarbServer_blockAt_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func NewRootZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func ReadRootZarbServer_blockAt_Params(msg *capnp.Message) (ZarbServer_blockAt_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Params{root.Struct()}, err
}

func (s ZarbServer_blockAt_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Params) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s ZarbServer_blockAt_Params) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ZarbServer_blockAt_Params_List is a list of ZarbServer_blockAt_Params.
type ZarbServer_blockAt_Params_List struct{ capnp.List }

// NewZarbServer_blockAt_Params creates a new list of ZarbServer_blockAt_Params.
func NewZarbServer_blockAt_Params_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_blockAt_Params_List{l}, err
}

func (s ZarbServer_blockAt_Params_List) At(i int) ZarbServer_blockAt_Params {
	return ZarbServer_blockAt_Params{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Params_List) Set(i int, v ZarbServer_blockAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_blockAt_Params_Promise is a wrapper for a ZarbServer_blockAt_Params promised by a client call.
type ZarbServer_blockAt_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Params_Promise) Struct() (ZarbServer_blockAt_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Params{s}, err
}

type ZarbServer_blockAt_Results struct{ capnp.Struct }

// ZarbServer_blockAt_Results_TypeID is the unique identifier for the type ZarbServer_blockAt_Results.
const ZarbServer_blockAt_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func NewRootZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func ReadRootZarbServer_blockAt_Results(msg *capnp.Message) (ZarbServer_blockAt_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Results{root.Struct()}, err
}

func (s ZarbServer_blockAt_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_blockAt_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_blockAt_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_blockAt_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_blockAt_Results_List is a list of ZarbServer_blockAt_Results.
type ZarbServer_blockAt_Results_List struct{ capnp.List }

// NewZarbServer_blockAt_Results creates a new list of ZarbServer_blockAt_Results.
func NewZarbServer_blockAt_Results_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_blockAt_Results_List{l}, err
}

func (s ZarbServer_blockAt_Results_List) At(i int) ZarbServer_blockAt_Results {
	return ZarbServer_blockAt_Results{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Results_List) Set(i int, v ZarbServer_blockAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_blockAt_Results_Promise is a wrapper for a ZarbServer_blockAt_Results promised by a client call.
type ZarbServer_blockAt_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Results_Promise) Struct() (ZarbServer_blockAt_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Results{s}, err
}

func (p ZarbServer_blockAt_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_block_Params struct{ capnp.Struct }

// ZarbServer_block_Params_TypeID is the unique identifier for the type ZarbServer_block_Params.
const ZarbServer_block_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func NewRootZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func ReadRootZarbServer_block_Params(msg *capnp.Message) (ZarbServer_block_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Params{root.Struct()}, err
}

func (s ZarbServer_block_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_block_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_block_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_block_Params_List is a list of ZarbServer_block_Params.
type ZarbServer_block_Params_List struct{ capnp.List }

// NewZarbServer_block_Params creates a new list of ZarbServer_block_Params.
func NewZarbServer_block_Params_List(s *capnp.Segment, sz int32) (ZarbServer_block_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Params_List{l}, err
}

func (s ZarbServer_block_Params_List) At(i int) ZarbServer_block_Params {
	return ZarbServer_block_Params{s.List.Struct(i)}
}

func (s ZarbServer_block_Params_List) Set(i int, v ZarbServer_block_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_block_Params_Promise is a wrapper for a ZarbServer_block_Params promised by a client call.
type ZarbServer_block_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Params_Promise) Struct() (ZarbServer_block_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Params{s}, err
}

type ZarbServer_block_Results struct{ capnp.Struct }

// ZarbServer_block_Results_TypeID is the unique identifier for the type ZarbServer_block_Results.
const ZarbServer_block_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func NewRootZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func ReadRootZarbServer_block_Results(msg *capnp.Message) (ZarbServer_block_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Results{root.Struct()}, err
}

func (s ZarbServer_block_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_block_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_block_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_block_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_block_Results_List is a list of ZarbServer_block_Results.
type ZarbServer_block_Results_List struct{ capnp.List }

// NewZarbServer_block_Results creates a new list of ZarbServer_block_Results.
func NewZarbServer_block_Results_List(s *capnp.Segment, sz int32) (ZarbServer_block_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Results_List{l}, err
}

func (s ZarbServer_block_Results_List) At(i int) ZarbServer_block_Results {
	return ZarbServer_block_Results{s.List.Struct(i)}
}

func (s ZarbServer_block_Results_List) Set(i int, v ZarbServer_block_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_block_Results_Promise is a wrapper for a ZarbServer_block_Results promised by a client call.
type ZarbServer_block_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Results_Promise) Struct() (ZarbServer_block_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Results{s}, err
}

func (p ZarbServer_block_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_tx_Params struct{ capnp.Struct }

// ZarbServer_tx_Params_TypeID is the unique identifier for the type ZarbServer_tx_Params.
const ZarbServer_tx_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func NewRootZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func ReadRootZarbServer_tx_Params(msg *capnp.Message) (ZarbServer_tx_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Params{root.Struct()}, err
}

func (s ZarbServer_tx_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_tx_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_tx_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_tx_Params_List is a list of ZarbServer_tx_Params.
type ZarbServer_tx_Params_List struct{ capnp.List }

// NewZarbServer_tx_Params creates a new list of ZarbServer_tx_Params.
func NewZarbServer_tx_Params_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Params_List{l}, err
}

func (s ZarbServer_tx_Params_List) At(i int) ZarbServer_tx_Params {
	return ZarbServer_tx_Params{s.List.Struct(i)}
}

func (s ZarbServer_tx_Params_List) Set(i int, v ZarbServer_tx_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_tx_Params_Promise is a wrapper for a ZarbServer_tx_Params promised by a client call.
type ZarbServer_tx_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Params_Promise) Struct() (ZarbServer_tx_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Params{s}, err
}

type ZarbServer_tx_Results struct{ capnp.Struct }

// ZarbServer_tx_Results_TypeID is the unique identifier for the type ZarbServer_tx_Results.
const ZarbServer_tx_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func NewRootZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func ReadRootZarbServer_tx_Results(msg *capnp.Message) (ZarbServer_tx_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Results{root.Struct()}, err
}

func (s ZarbServer_tx_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_tx_Results) TxInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_tx_Results) HasTxInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Results) SetTxInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTxInfo sets the txInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_tx_Results) NewTxInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_tx_Results_List is a list of ZarbServer_tx_Results.
type ZarbServer_tx_Results_List struct{ capnp.List }

// NewZarbServer_tx_Results creates a new list of ZarbServer_tx_Results.
func NewZarbServer_tx_Results_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Results_List{l}, err
}

func (s ZarbServer_tx_Results_List) At(i int) ZarbServer_tx_Results {
	return ZarbServer_tx_Results{s.List.Struct(i)}
}

func (s ZarbServer_tx_Results_List) Set(i int, v ZarbServer_tx_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_tx_Results_Promise is a wrapper for a ZarbServer_tx_Results promised by a client call.
type ZarbServer_tx_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Results_Promise) Struct() (ZarbServer_tx_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Results{s}, err
}

func (p ZarbServer_tx_Results_Promise) TxInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacV}hTW\x16?\xbf{\xe7\xe5\xcdd" +
	"\x133\x8f7aE\\\x13\x97\x11\x8ck\x8c\x1a\xddE" +
	"\xd9%1*$\x8b\xc2\xdc\x89\xc2nv]\xf6\x99y" +
	"\x9a\xd9\xcc\xd7\xbe\xf7bB`\x09\xc8\xeeB\x05+\xb5" +
	"\xdf\xb4\x7f\xb4\xa5PZ\xfb%4PAAkE+" +
	"\x16\xfc\xa8\xd0J\xab4\x08\xb5\xd0\xa2i\x1b\xd0\xb6\xe9" +
	"\x94\xf3\x92\xcc\x9bL\x15\xd3\x8f\xff.\xe7\x9d\xf7\xfb\x9d" +
	"\xfb;\xbfs\xef]\xf9\x7f\xd9.Vi-\x1a\x91\xfa" +
	"\xa3VU\xbc\x98<yb\xd1\xef\x96\xfc\x8f\x8cF\x10" +
	"i\xd0\x89Z\xff#\xfe\x05\x82\xf9\x80h#|w\xf6" +
	"\xe2\xed\xa6\xd3\xe3\xfbU#@\x14\xe2\xcf/\x8aa\xfe" +
	"<\xca\x9f\x8b\xb7^zbd\xf4\xc3\xab\x0f\x92\xaa\x87" +
	"(\xb6N\xeex\xfc|\xff\xe8\x7fI\xd3u\"\xf3\xb2" +
	"\x183?\x16\xfc\xcfG\xa2\x08B1l\xbe\xfc\x8f\x7f" +
	"7\xf4?R\xce6\x19r\x18.\xa21\xdc\xef\xaf\xed" +
	"\x17\xcb?x\xfe1\x86C\x19\x1cg\x9a\xcd\xda\x17\xe6" +
	":\x8dWk\xb5AB\xb1>yxx\xf7\xf8\xe5g" +
	"+\xb9\xfd\x94\x87\xb4\xb7\xcc'y\xd5\xfa\xa8v\x80\xb9" +
	"\xff6x\xe8f\x06\x87\x9f+\xe7^\xac\xf70w\xb3" +
	"\xce\xdc\x9bjF\xf2\x93\x0f\x7f\xf9&\x19\xf5\xe5\xd4\x92" +
	"\xd1\xb6\xeaW\xcc\xbf\xfa{\xda\xae\xbfF(6M," +
	"\xbb\xf9\xcaX\xe3\x89\x8a\\\xbf\xccq\xfd\xac9\xe9\xe7" +
	"\xde\xf1q\x8f\xf4\x1c\\b\xed\xbbv\xa9\x9c\xb8)\x9c" +
	"d\xe2\xb5aNx\xea\xeap\xd7\xc9\x96c\xd7+7" +
	"\xed3o\x0f\x7fmZa^\xed\x08\x7fB(\xfe\xe1" +
	"P\xec7\x07:\xab\xc6+\x93YfsUd\xcc\xfc" +
	"S\x84W\xeb\"\\\xe6\xe9__\x89|s\xfe\x99\x89" +
	"\xbb\"\x7f\x1a\x193'\xfc\xe4\xf1\x08#/\\\xf4\xc2" +
	"\xde\xa7\x137&\xca\xeb<U\xbd\x97\xeb\xbcP\xcdu" +
	"^\x1f\xb9T\xfb\xeaX\xd5\x1d2\xeae\x00Fh\x9d" +
	"\xa8\x160\xf1+\x86\x9a\xac>m\x0e\xf0\xaa888" +
	"\xd8\xd2k\x15r\xa1B\xcb\xb0\xe5\xec\\\xc1\xeb\xc2\xfa" +
	"\x1e\xcb\xd9\xd9m;{lg\xc5\xceL\xbe\xb7?\x9e" +
	"\xb0\xea\x1c+\xeb\xaa\x90\x0c\x11\x85@d\xd4.#R" +
	"a\x09\x15\x13\xa8\xeb\xb3\xdc>\xd4\x92@-a\x8e\x90" +
	"\x1b\xbcx[\xc2\xaa\x04]\x1f\x80\xb6\xf5\xd9\xe9\xdd}" +
	"\x1e\xc2$\x10.\x83\x15\xb3`;mKO\xd9N\x02" +
	"P\xf1\x12\xcc\xe7\x1dD\xea\x86\x84\xfaJ\xc0\x00b<" +
	"\x14\xc68\x17\xfc\x99\x84\xba-\x00\x11\x83 2&8" +
	"\xf1\x96\x84\xfaV\xc0\x90\x88A\x12\x19w\x92D\xea\xb6" +
	"Dw\x08\x02FH\xc4\x10\"2\x01\x87(\x09\x89\xee" +
	"\x1a\x0ek2\x06\x8d\xc8\x8c`\x1fQw\x0d\xc7\xe7s" +
	"\xbc*\x14C\x15\x91Y\x8f\x83D\xdd\xf39\x1e\xe7\xb8" +
	"\xae\xc5|\xdb-\xc6^\xa2\xeeF\x8e/\xe7x\xb8*" +
	"\x860\x91\xd9\x84\x1e\xa2\xee\xa5\x1c_\x03\x81\x91=\xb6" +
	"\xe3\xa6\xf39\x84H D\xa8\xf3\xd2Y\x1b\x1a\x09h" +
	"\x84\x11o\xc8\xed,W\xdc\xf5,\xcf\xee\xb4\\B\x10" +
	"\xcbX\xae\xd7\x91\xc9\xf7RC\xff\xac\\\x8e'\xed^" +
	"\x1b\xe9\x82\xe7\xa3\x10\x95\xbe\xe5\xec!oc>\x9bE" +
	"\xda\xb3\x1d\xfeX\x86Wp\xf2\x85\xbck;\xd8\x90J" +
	"9\xb6\xeb\xd2,D\xfe\x8bd\xdaC4\xb0>\x01\xd1" +
	"9\xdb!\x9e\xb4\x1b\xdc\x81\x8c7\xcb\x0d\xdc\x88\x1a\x09" +
	"5_\xa0\xe8gu\xe5v\x11\xf2\x88\x06\xc3XA2" +
	"\xdb\x1c\x1b\xf3\xd9\x86,\xef\x85\xed\x11.\xe16q\xd7" +
	"\xe3\x12j\xa5\xc0\x8c;\x9a\xd9yK%\xd4\x1a\x81\x11" +
	"kj\x8b3;ls\xd3\xbbsv\x0a \x01\xdc\x93" +
	"l\xdb\x101\xcd\xc2\x12\xcd\xe8j\"\xf5\xba\x84:Z" +
	"\xe6\xc2#\xcc\xf3\x86\x84:.`\x88i\x1b\x1e\xfb3" +
	"\x91:*\xa1\xce\x08@N\xb9\xf0\x14'\x1e\x97P\xe7" +
	"\xd8\x84\xf0Mh\xbc\xf3[\"\xf5\xb6\x84:\x1fX\xd0" +
	"x\x97\x8d}FB\xbd\x17\xf8\xcf\xb8\xc0\xc1s\x12\xea" +
	"}\x81\x06\xd7\xb3\xb2\x85`7v.e;\xa5\xf69" +
	"v\xaf\x9d\xdec;\x14\x18\xa1\xcd\xca\xe6\x07r\x1e\"" +
	"$\x10!\xe8\xbbl{f]\x97\xb2<k&\xaf." +
	"kg\xf3\xa8!\x81\x9a\xb94\xda\x1b\x8a'mw " +
	"#\xbd{\xce\xbc7\xd4\x95\xdb5\xf7\x06wd\xf2\xb2" +
	"\xb7\x9fe\xaf)\xe1mf\xbcv\x09\xb5\xa5L\xf6." +
	"\x16n\x93\x84J\x94\xc9\xbe\xb5\x87Hm\x91P\x7f\xf1" +
	"O\x1b\x8bU\x89\x06w\xe5\x14\xb3\xee\x0d\xb9\x88\x06W" +
	"\xc9t=s4}\xa5E\\\xf2Mr\x97\xdd\xc7\xb9" +
	"\x06\xcb\xed\xb3]\xcc#$$|\x91\xe7\xcdQW\xff" +
	"$\xc5\x8f;\x9f\x7f e\x9b?`y.0Z\xc2" +
	"\xb1\x18\xe7\xef\x12\xaa/\x18\x16\x9b\x8b\xfe\xa7\x84\xca\xb0" +
	"\x9a\x98R3\xcd\x89)\x09U\xe0\xb3TL\xb98\xcb" +
	"3\xd0'\xa1\xbc\x8a**N\xf7Y\xb6j\xf0g\x1d" +
	"\xd1\xe0\xae\xbf\xdf\x94\xeb\xd9\xb4W\xe1\x82\xd5\x81\x0bJ" +
	"&\xe0\xf3\xa4SBm++[q01\xb5\x97\x06" +
	"'?\x90K\x95n\x1c\x1e{\xcb\x1bp\x08vI\xbc" +
	"\xde|\xd6?Q\x08\xa5>E\x83\xf7\x10aV\xc7*" +
	"\xbb\xdf\xa5\xff\xd2\xf2.\xf8\x09\xf2Jo\x08\xd1\xe0Y" +
	"V\xa1\xadv\xbf[\xdb\x1fa\xcf\xa5\x9fwP\xcb{" +
	"\xd0\xd0T\x1b5\xa2\x997m\xd9\x8bGu\x9006" +
	"\xeb@\xe9A\x8c\x99\xb7\xaa\xb1n5\x09\xa3Y\x87(" +
	"\xbd\xe40\xf3\x964\x16/ a\xd4\xeb#\xd3[h" +
	"\x9fvX;K\xd1\x8e\x04\xf0}\x00\x00\x00\xff\xff\x14" +
	"\xe3\xc8\xef"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x85252b1ec1c352d2,
		0x8df1c729f8d2ca00,
		0x8ededcb57f98aaf0,
		0x946b1f715eac1308,
		0x96a4d92c028ddf36,
		0xa1d5f1677ab15215,
		0xa2b1016cefab775b,
		0xb8f393fd6f7f0c44,
		0xc120e2adef2af529,
		0xd3df8a6125925ab9,
		0xe4bd2fc3497ade9b,
		0xf106488f1d14ab37,
		0xf5a0d0fb09da17c7,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4)
}
